{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/dist/query/react';\nconst initialState = {\n  id: 0,\n  address: '',\n  phone_number: ''\n};\nexport const addressApiSlice = createApi({\n  reducerPath: 'addressApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: `/addresses`\n  }),\n  tagTypes: [\"addresses\"],\n  endpoints: builder => ({\n    fetchAddresses: builder.query({\n      query: () => \"/\",\n      transformResponse: response => {\n        return response.addresses;\n      },\n      providesTags: [\"addresses\"]\n    }),\n    storeAddress: builder.mutation({\n      query: address => ({\n        url: \"/\",\n        method: \"POST\",\n        body: {\n          address: address.address,\n          phone_number: address.phone_number\n        }\n      }),\n      transformResponse: response => {\n        return response;\n      },\n      invalidatesTags: [\"addresses\"]\n    })\n  })\n});\nexport const {\n  useStoreAddressMutation,\n  useFetchAddressesQuery\n} = addressApiSlice;\nexport const addressSlice = createSlice({\n  name: 'addresses',\n  initialState: initialState.address,\n  reducers: {\n    resetAddressSlice: state => {\n      state = initialState.address;\n    }\n  }\n});\nexport const {\n  resetAddressSlice\n} = addressSlice.actions;\nexport default addressSlice.reducer;","map":{"version":3,"names":["createSlice","createApi","fetchBaseQuery","initialState","id","address","phone_number","addressApiSlice","reducerPath","baseQuery","baseUrl","tagTypes","endpoints","builder","fetchAddresses","query","transformResponse","response","addresses","providesTags","storeAddress","mutation","url","method","body","invalidatesTags","useStoreAddressMutation","useFetchAddressesQuery","addressSlice","name","reducers","resetAddressSlice","state","actions","reducer"],"sources":["/home/z3r0/Desktop/binastaNode2/client-distributor-shop/src/store/reducers/addressSlice.ts"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/dist/query/react';\n\nexport type Address = {\n    id?: number | null,\n    user_id?: number | null,\n    address?: string | null,\n    phone_number?: string | null,\n}\n\nconst initialState: Address = {\n    id: 0,\n    address: '',\n    phone_number: ''\n};\n\nexport const addressApiSlice = createApi({\n    reducerPath: 'addressApi',\n    baseQuery: fetchBaseQuery({\n        baseUrl: `/addresses`,\n    }),\n    tagTypes: [\"addresses\"],\n    endpoints: (builder) => ({\n        fetchAddresses: builder.query<Address[], void>({\n            query: () => \"/\",\n            transformResponse: (response: { addresses: Address[] }) => {\n                return response.addresses;\n            },\n            providesTags: [\"addresses\"]\n        }),\n        storeAddress: builder.mutation<{ id: Address[\"id\"] | undefined }, Address>({\n            query: (address) => ({\n                url: \"/\",\n                method: \"POST\",\n                body: { address: address.address, phone_number: address.phone_number }\n            }),\n            transformResponse: (response: { id: number | undefined  }) => {\n                return response;\n            },\n            invalidatesTags: [\"addresses\"]\n        })\n    })\n});\n\nexport const { useStoreAddressMutation, useFetchAddressesQuery } = addressApiSlice;\n\nexport const addressSlice = createSlice({\n    name: 'addresses',\n    initialState: initialState.address,\n    reducers: {\n        resetAddressSlice: (state) => {\n            state = initialState.address;\n        }\n    }\n});\n\nexport const { resetAddressSlice } = addressSlice.actions;\n\nexport default addressSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,SAAS,EAAEC,cAAc,QAAQ,mCAAmC;AAS7E,MAAMC,YAAqB,GAAG;EAC1BC,EAAE,EAAE,CAAC;EACLC,OAAO,EAAE,EAAE;EACXC,YAAY,EAAE;AAClB,CAAC;AAED,OAAO,MAAMC,eAAe,GAAGN,SAAS,CAAC;EACrCO,WAAW,EAAE,YAAY;EACzBC,SAAS,EAAEP,cAAc,CAAC;IACtBQ,OAAO,EAAG;EACd,CAAC,CAAC;EACFC,QAAQ,EAAE,CAAC,WAAW,CAAC;EACvBC,SAAS,EAAGC,OAAO,KAAM;IACrBC,cAAc,EAAED,OAAO,CAACE,KAAK,CAAkB;MAC3CA,KAAK,EAAEA,CAAA,KAAM,GAAG;MAChBC,iBAAiB,EAAGC,QAAkC,IAAK;QACvD,OAAOA,QAAQ,CAACC,SAAS;MAC7B,CAAC;MACDC,YAAY,EAAE,CAAC,WAAW;IAC9B,CAAC,CAAC;IACFC,YAAY,EAAEP,OAAO,CAACQ,QAAQ,CAA6C;MACvEN,KAAK,EAAGV,OAAO,KAAM;QACjBiB,GAAG,EAAE,GAAG;QACRC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAE;UAAEnB,OAAO,EAAEA,OAAO,CAACA,OAAO;UAAEC,YAAY,EAAED,OAAO,CAACC;QAAa;MACzE,CAAC,CAAC;MACFU,iBAAiB,EAAGC,QAAqC,IAAK;QAC1D,OAAOA,QAAQ;MACnB,CAAC;MACDQ,eAAe,EAAE,CAAC,WAAW;IACjC,CAAC;EACL,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEC,uBAAuB;EAAEC;AAAuB,CAAC,GAAGpB,eAAe;AAElF,OAAO,MAAMqB,YAAY,GAAG5B,WAAW,CAAC;EACpC6B,IAAI,EAAE,WAAW;EACjB1B,YAAY,EAAEA,YAAY,CAACE,OAAO;EAClCyB,QAAQ,EAAE;IACNC,iBAAiB,EAAGC,KAAK,IAAK;MAC1BA,KAAK,GAAG7B,YAAY,CAACE,OAAO;IAChC;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAE0B;AAAkB,CAAC,GAAGH,YAAY,CAACK,OAAO;AAEzD,eAAeL,YAAY,CAACM,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}