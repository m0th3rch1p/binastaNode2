{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/dist/query/react\";\nconst initialState = {\n  id: 0,\n  ref: '',\n  variations: []\n};\nexport const orderApiSlice = createApi({\n  reducerPath: 'orderApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: `/orders`\n  }),\n  tagTypes: [\"orders\"],\n  endpoints: builder => ({\n    fetchOrders: builder.query({\n      query: () => \"/\",\n      transformResponse: response => {\n        return response.orders;\n      },\n      providesTags: [\"orders\"]\n    }),\n    fetchSingleOrder: builder.query({\n      query: id => `/${id}`,\n      transformResponse: response => {\n        return {\n          order: response.order,\n          product_variations: response.product_variations\n        };\n      },\n      providesTags: [\"orders\"]\n    }),\n    placeOrder: builder.mutation({\n      query: order => ({\n        url: \"/\",\n        method: \"POST\",\n        body: {\n          user_address_id: order.user_address_id,\n          product_variations: order.product_variations\n        }\n      }),\n      transformResponse: response => {\n        return response;\n      }\n    })\n  })\n});\nexport const {\n  useFetchOrdersQuery,\n  useFetchSingleOrderQuery,\n  usePlaceOrderMutation\n} = orderApiSlice;\nexport const orderSlice = createSlice({\n  name: 'orders',\n  initialState,\n  reducers: {\n    resetOrderSlice: () => initialState\n  }\n});\nexport const {\n  resetOrderSlice\n} = orderSlice.actions;\nexport default orderSlice.reducer;","map":{"version":3,"names":["createSlice","createApi","fetchBaseQuery","initialState","id","ref","variations","orderApiSlice","reducerPath","baseQuery","baseUrl","tagTypes","endpoints","builder","fetchOrders","query","transformResponse","response","orders","providesTags","fetchSingleOrder","order","product_variations","placeOrder","mutation","url","method","body","user_address_id","useFetchOrdersQuery","useFetchSingleOrderQuery","usePlaceOrderMutation","orderSlice","name","reducers","resetOrderSlice","actions","reducer"],"sources":["/home/z3r0/Desktop/binastaNode2/client-distributor-shop/src/store/reducers/ordersSlice.ts"],"sourcesContent":["import { BASE_URL } from \"@/constants/apiStatus\";\nimport { ProductVariation } from \"@/types/ProductVariation.type\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/dist/query/react\";\n\nexport type Order = {\n    id?: number,\n    ref?: string,\n    status?: string,\n    amount?: number,\n    variations?: ProductVariation[],\n    created_at?: string\n};\n\nconst initialState: Order = {\n    id: 0,\n    ref: '',\n    variations: [] as ProductVariation[]\n};\n\nexport const orderApiSlice = createApi({\n    reducerPath: 'orderApi',\n    baseQuery: fetchBaseQuery({\n        baseUrl: `/orders`\n    }),\n    tagTypes: [\"orders\"],\n    endpoints: (builder) => ({\n        fetchOrders: builder.query<Order[], void>({\n            query: () => \"/\",\n            transformResponse: (response: { orders: Order[] }) => {\n                return response.orders\n            },\n            providesTags: [\"orders\"]\n        }),\n        fetchSingleOrder: builder.query<{ order: Order, product_variations: {id: number, variation: string, buy_price: number, product_name: string, quantity: number[]}[]}, number>({\n            query: (id) => `/${id}`,\n            transformResponse: (response: { order: Order, product_variations: {id: number, variation: string, buy_price: number, product_name: string, quantity: number[]}[] }) => {\n                return {order: response.order, product_variations: response.product_variations};\n            },\n            providesTags: [\"orders\"]\n        }),\n        placeOrder: builder.mutation<{ status: number, id: number }, { user_address_id: number, product_variations: [number, number][] }>({\n            query: (order) => ({\n                url: \"/\",\n                method: \"POST\",\n                body: { user_address_id: order.user_address_id, product_variations: order.product_variations }\n            }),\n            transformResponse: (response: { status: number, id: number }) => {\n                return response\n            },\n        })   \n    })\n});\n\nexport const { useFetchOrdersQuery, useFetchSingleOrderQuery, usePlaceOrderMutation } = orderApiSlice;\n\nexport const orderSlice = createSlice({\n    name: 'orders',\n    initialState,\n    reducers: {\n        resetOrderSlice: () => initialState\n    }\n});\n\nexport const { resetOrderSlice } = orderSlice.actions;\n\nexport default orderSlice.reducer;"],"mappings":"AAEA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,SAAS,EAAEC,cAAc,QAAQ,mCAAmC;AAW7E,MAAMC,YAAmB,GAAG;EACxBC,EAAE,EAAE,CAAC;EACLC,GAAG,EAAE,EAAE;EACPC,UAAU,EAAE;AAChB,CAAC;AAED,OAAO,MAAMC,aAAa,GAAGN,SAAS,CAAC;EACnCO,WAAW,EAAE,UAAU;EACvBC,SAAS,EAAEP,cAAc,CAAC;IACtBQ,OAAO,EAAG;EACd,CAAC,CAAC;EACFC,QAAQ,EAAE,CAAC,QAAQ,CAAC;EACpBC,SAAS,EAAGC,OAAO,KAAM;IACrBC,WAAW,EAAED,OAAO,CAACE,KAAK,CAAgB;MACtCA,KAAK,EAAEA,CAAA,KAAM,GAAG;MAChBC,iBAAiB,EAAGC,QAA6B,IAAK;QAClD,OAAOA,QAAQ,CAACC,MAAM;MAC1B,CAAC;MACDC,YAAY,EAAE,CAAC,QAAQ;IAC3B,CAAC,CAAC;IACFC,gBAAgB,EAAEP,OAAO,CAACE,KAAK,CAA8I;MACzKA,KAAK,EAAGX,EAAE,IAAM,IAAGA,EAAG,EAAC;MACvBY,iBAAiB,EAAGC,QAA8I,IAAK;QACnK,OAAO;UAACI,KAAK,EAAEJ,QAAQ,CAACI,KAAK;UAAEC,kBAAkB,EAAEL,QAAQ,CAACK;QAAkB,CAAC;MACnF,CAAC;MACDH,YAAY,EAAE,CAAC,QAAQ;IAC3B,CAAC,CAAC;IACFI,UAAU,EAAEV,OAAO,CAACW,QAAQ,CAAsG;MAC9HT,KAAK,EAAGM,KAAK,KAAM;QACfI,GAAG,EAAE,GAAG;QACRC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAE;UAAEC,eAAe,EAAEP,KAAK,CAACO,eAAe;UAAEN,kBAAkB,EAAED,KAAK,CAACC;QAAmB;MACjG,CAAC,CAAC;MACFN,iBAAiB,EAAGC,QAAwC,IAAK;QAC7D,OAAOA,QAAQ;MACnB;IACJ,CAAC;EACL,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEY,mBAAmB;EAAEC,wBAAwB;EAAEC;AAAsB,CAAC,GAAGxB,aAAa;AAErG,OAAO,MAAMyB,UAAU,GAAGhC,WAAW,CAAC;EAClCiC,IAAI,EAAE,QAAQ;EACd9B,YAAY;EACZ+B,QAAQ,EAAE;IACNC,eAAe,EAAEA,CAAA,KAAMhC;EAC3B;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEgC;AAAgB,CAAC,GAAGH,UAAU,CAACI,OAAO;AAErD,eAAeJ,UAAU,CAACK,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}